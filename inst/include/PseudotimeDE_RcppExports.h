// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_PseudotimeDE_RCPPEXPORTS_H_GEN_
#define RCPP_PseudotimeDE_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace PseudotimeDE {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("PseudotimeDE", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("PseudotimeDE", "_PseudotimeDE_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in PseudotimeDE");
            }
        }
    }

    inline arma::vec eigenForDiscreteProbs(arma::vec p) {
        typedef SEXP(*Ptr_eigenForDiscreteProbs)(SEXP);
        static Ptr_eigenForDiscreteProbs p_eigenForDiscreteProbs = NULL;
        if (p_eigenForDiscreteProbs == NULL) {
            validateSignature("arma::vec(*eigenForDiscreteProbs)(arma::vec)");
            p_eigenForDiscreteProbs = (Ptr_eigenForDiscreteProbs)R_GetCCallable("PseudotimeDE", "_PseudotimeDE_eigenForDiscreteProbs");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_eigenForDiscreteProbs(Shield<SEXP>(Rcpp::wrap(p)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::vec >(rcpp_result_gen);
    }

    inline arma::vec HoeffIndMixedCdfRCPP(arma::vec x, arma::vec eigenP, double maxError) {
        typedef SEXP(*Ptr_HoeffIndMixedCdfRCPP)(SEXP,SEXP,SEXP);
        static Ptr_HoeffIndMixedCdfRCPP p_HoeffIndMixedCdfRCPP = NULL;
        if (p_HoeffIndMixedCdfRCPP == NULL) {
            validateSignature("arma::vec(*HoeffIndMixedCdfRCPP)(arma::vec,arma::vec,double)");
            p_HoeffIndMixedCdfRCPP = (Ptr_HoeffIndMixedCdfRCPP)R_GetCCallable("PseudotimeDE", "_PseudotimeDE_HoeffIndMixedCdfRCPP");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_HoeffIndMixedCdfRCPP(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(eigenP)), Shield<SEXP>(Rcpp::wrap(maxError)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::vec >(rcpp_result_gen);
    }

    inline double TStarHellerAndHellerRCPP(const arma::vec& x, const arma::vec& y) {
        typedef SEXP(*Ptr_TStarHellerAndHellerRCPP)(SEXP,SEXP);
        static Ptr_TStarHellerAndHellerRCPP p_TStarHellerAndHellerRCPP = NULL;
        if (p_TStarHellerAndHellerRCPP == NULL) {
            validateSignature("double(*TStarHellerAndHellerRCPP)(const arma::vec&,const arma::vec&)");
            p_TStarHellerAndHellerRCPP = (Ptr_TStarHellerAndHellerRCPP)R_GetCCallable("PseudotimeDE", "_PseudotimeDE_TStarHellerAndHellerRCPP");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_TStarHellerAndHellerRCPP(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(y)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

}

#endif // RCPP_PseudotimeDE_RCPPEXPORTS_H_GEN_
