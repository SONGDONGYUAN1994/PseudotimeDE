// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/PseudotimeDE.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// eigenForDiscreteProbs
arma::vec eigenForDiscreteProbs(arma::vec p);
static SEXP _PseudotimeDE_eigenForDiscreteProbs_try(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(eigenForDiscreteProbs(p));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _PseudotimeDE_eigenForDiscreteProbs(SEXP pSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_PseudotimeDE_eigenForDiscreteProbs_try(pSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// HoeffIndMixedCdfRCPP
arma::vec HoeffIndMixedCdfRCPP(arma::vec x, arma::vec eigenP, double maxError);
static SEXP _PseudotimeDE_HoeffIndMixedCdfRCPP_try(SEXP xSEXP, SEXP eigenPSEXP, SEXP maxErrorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type eigenP(eigenPSEXP);
    Rcpp::traits::input_parameter< double >::type maxError(maxErrorSEXP);
    rcpp_result_gen = Rcpp::wrap(HoeffIndMixedCdfRCPP(x, eigenP, maxError));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _PseudotimeDE_HoeffIndMixedCdfRCPP(SEXP xSEXP, SEXP eigenPSEXP, SEXP maxErrorSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_PseudotimeDE_HoeffIndMixedCdfRCPP_try(xSEXP, eigenPSEXP, maxErrorSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// TStarHellerAndHellerRCPP
double TStarHellerAndHellerRCPP(const arma::vec& x, const arma::vec& y);
static SEXP _PseudotimeDE_TStarHellerAndHellerRCPP_try(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(TStarHellerAndHellerRCPP(x, y));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _PseudotimeDE_TStarHellerAndHellerRCPP(SEXP xSEXP, SEXP ySEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_PseudotimeDE_TStarHellerAndHellerRCPP_try(xSEXP, ySEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _PseudotimeDE_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("arma::vec(*eigenForDiscreteProbs)(arma::vec)");
        signatures.insert("arma::vec(*HoeffIndMixedCdfRCPP)(arma::vec,arma::vec,double)");
        signatures.insert("double(*TStarHellerAndHellerRCPP)(const arma::vec&,const arma::vec&)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _PseudotimeDE_RcppExport_registerCCallable() { 
    R_RegisterCCallable("PseudotimeDE", "_PseudotimeDE_eigenForDiscreteProbs", (DL_FUNC)_PseudotimeDE_eigenForDiscreteProbs_try);
    R_RegisterCCallable("PseudotimeDE", "_PseudotimeDE_HoeffIndMixedCdfRCPP", (DL_FUNC)_PseudotimeDE_HoeffIndMixedCdfRCPP_try);
    R_RegisterCCallable("PseudotimeDE", "_PseudotimeDE_TStarHellerAndHellerRCPP", (DL_FUNC)_PseudotimeDE_TStarHellerAndHellerRCPP_try);
    R_RegisterCCallable("PseudotimeDE", "_PseudotimeDE_RcppExport_validate", (DL_FUNC)_PseudotimeDE_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_PseudotimeDE_eigenForDiscreteProbs", (DL_FUNC) &_PseudotimeDE_eigenForDiscreteProbs, 1},
    {"_PseudotimeDE_HoeffIndMixedCdfRCPP", (DL_FUNC) &_PseudotimeDE_HoeffIndMixedCdfRCPP, 3},
    {"_PseudotimeDE_TStarHellerAndHellerRCPP", (DL_FUNC) &_PseudotimeDE_TStarHellerAndHellerRCPP, 2},
    {"_PseudotimeDE_RcppExport_registerCCallable", (DL_FUNC) &_PseudotimeDE_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_PseudotimeDE(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
